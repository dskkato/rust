// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/framework/graph_debug_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct GraphDebugInfo {
    // message fields
    pub files: ::protobuf::RepeatedField<::std::string::String>,
    pub frames_by_id: ::std::collections::HashMap<u64, GraphDebugInfo_FileLineCol>,
    pub traces_by_id: ::std::collections::HashMap<u64, GraphDebugInfo_StackTrace>,
    pub traces: ::std::collections::HashMap<::std::string::String, GraphDebugInfo_StackTrace>,
    pub name_to_trace_id: ::std::collections::HashMap<::std::string::String, u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphDebugInfo {
    fn default() -> &'a GraphDebugInfo {
        <GraphDebugInfo as ::protobuf::Message>::default_instance()
    }
}

impl GraphDebugInfo {
    pub fn new() -> GraphDebugInfo {
        ::std::default::Default::default()
    }

    // repeated string files = 1;


    pub fn get_files(&self) -> &[::std::string::String] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.GraphDebugInfo.FramesByIdEntry frames_by_id = 4;


    pub fn get_frames_by_id(&self) -> &::std::collections::HashMap<u64, GraphDebugInfo_FileLineCol> {
        &self.frames_by_id
    }
    pub fn clear_frames_by_id(&mut self) {
        self.frames_by_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_frames_by_id(&mut self, v: ::std::collections::HashMap<u64, GraphDebugInfo_FileLineCol>) {
        self.frames_by_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_frames_by_id(&mut self) -> &mut ::std::collections::HashMap<u64, GraphDebugInfo_FileLineCol> {
        &mut self.frames_by_id
    }

    // Take field
    pub fn take_frames_by_id(&mut self) -> ::std::collections::HashMap<u64, GraphDebugInfo_FileLineCol> {
        ::std::mem::replace(&mut self.frames_by_id, ::std::collections::HashMap::new())
    }

    // repeated .tensorflow.GraphDebugInfo.TracesByIdEntry traces_by_id = 6;


    pub fn get_traces_by_id(&self) -> &::std::collections::HashMap<u64, GraphDebugInfo_StackTrace> {
        &self.traces_by_id
    }
    pub fn clear_traces_by_id(&mut self) {
        self.traces_by_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_traces_by_id(&mut self, v: ::std::collections::HashMap<u64, GraphDebugInfo_StackTrace>) {
        self.traces_by_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_traces_by_id(&mut self) -> &mut ::std::collections::HashMap<u64, GraphDebugInfo_StackTrace> {
        &mut self.traces_by_id
    }

    // Take field
    pub fn take_traces_by_id(&mut self) -> ::std::collections::HashMap<u64, GraphDebugInfo_StackTrace> {
        ::std::mem::replace(&mut self.traces_by_id, ::std::collections::HashMap::new())
    }

    // repeated .tensorflow.GraphDebugInfo.TracesEntry traces = 2;


    pub fn get_traces(&self) -> &::std::collections::HashMap<::std::string::String, GraphDebugInfo_StackTrace> {
        &self.traces
    }
    pub fn clear_traces(&mut self) {
        self.traces.clear();
    }

    // Param is passed by value, moved
    pub fn set_traces(&mut self, v: ::std::collections::HashMap<::std::string::String, GraphDebugInfo_StackTrace>) {
        self.traces = v;
    }

    // Mutable pointer to the field.
    pub fn mut_traces(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, GraphDebugInfo_StackTrace> {
        &mut self.traces
    }

    // Take field
    pub fn take_traces(&mut self) -> ::std::collections::HashMap<::std::string::String, GraphDebugInfo_StackTrace> {
        ::std::mem::replace(&mut self.traces, ::std::collections::HashMap::new())
    }

    // repeated .tensorflow.GraphDebugInfo.NameToTraceIdEntry name_to_trace_id = 5;


    pub fn get_name_to_trace_id(&self) -> &::std::collections::HashMap<::std::string::String, u64> {
        &self.name_to_trace_id
    }
    pub fn clear_name_to_trace_id(&mut self) {
        self.name_to_trace_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_name_to_trace_id(&mut self, v: ::std::collections::HashMap<::std::string::String, u64>) {
        self.name_to_trace_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_name_to_trace_id(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, u64> {
        &mut self.name_to_trace_id
    }

    // Take field
    pub fn take_name_to_trace_id(&mut self) -> ::std::collections::HashMap<::std::string::String, u64> {
        ::std::mem::replace(&mut self.name_to_trace_id, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for GraphDebugInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.files)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeFixed64, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_FileLineCol>>(wire_type, is, &mut self.frames_by_id)?;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeFixed64, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_StackTrace>>(wire_type, is, &mut self.traces_by_id)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_StackTrace>>(wire_type, is, &mut self.traces)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeFixed64>(wire_type, is, &mut self.name_to_trace_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.files {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeFixed64, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_FileLineCol>>(4, &self.frames_by_id);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeFixed64, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_StackTrace>>(6, &self.traces_by_id);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_StackTrace>>(2, &self.traces);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeFixed64>(5, &self.name_to_trace_id);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.files {
            os.write_string(1, &v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeFixed64, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_FileLineCol>>(4, &self.frames_by_id, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeFixed64, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_StackTrace>>(6, &self.traces_by_id, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_StackTrace>>(2, &self.traces, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeFixed64>(5, &self.name_to_trace_id, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphDebugInfo {
        GraphDebugInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "files",
                |m: &GraphDebugInfo| { &m.files },
                |m: &mut GraphDebugInfo| { &mut m.files },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeFixed64, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_FileLineCol>>(
                "frames_by_id",
                |m: &GraphDebugInfo| { &m.frames_by_id },
                |m: &mut GraphDebugInfo| { &mut m.frames_by_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeFixed64, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_StackTrace>>(
                "traces_by_id",
                |m: &GraphDebugInfo| { &m.traces_by_id },
                |m: &mut GraphDebugInfo| { &mut m.traces_by_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_StackTrace>>(
                "traces",
                |m: &GraphDebugInfo| { &m.traces },
                |m: &mut GraphDebugInfo| { &mut m.traces },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeFixed64>(
                "name_to_trace_id",
                |m: &GraphDebugInfo| { &m.name_to_trace_id },
                |m: &mut GraphDebugInfo| { &mut m.name_to_trace_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphDebugInfo>(
                "GraphDebugInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphDebugInfo {
        static instance: ::protobuf::rt::LazyV2<GraphDebugInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphDebugInfo::new)
    }
}

impl ::protobuf::Clear for GraphDebugInfo {
    fn clear(&mut self) {
        self.files.clear();
        self.frames_by_id.clear();
        self.traces_by_id.clear();
        self.traces.clear();
        self.name_to_trace_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphDebugInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphDebugInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphDebugInfo_FileLineCol {
    // message fields
    file_index: ::std::option::Option<i32>,
    line: ::std::option::Option<i32>,
    col: ::std::option::Option<i32>,
    func: ::protobuf::SingularField<::std::string::String>,
    code: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphDebugInfo_FileLineCol {
    fn default() -> &'a GraphDebugInfo_FileLineCol {
        <GraphDebugInfo_FileLineCol as ::protobuf::Message>::default_instance()
    }
}

impl GraphDebugInfo_FileLineCol {
    pub fn new() -> GraphDebugInfo_FileLineCol {
        ::std::default::Default::default()
    }

    // optional int32 file_index = 1;


    pub fn get_file_index(&self) -> i32 {
        self.file_index.unwrap_or(0)
    }
    pub fn clear_file_index(&mut self) {
        self.file_index = ::std::option::Option::None;
    }

    pub fn has_file_index(&self) -> bool {
        self.file_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_index(&mut self, v: i32) {
        self.file_index = ::std::option::Option::Some(v);
    }

    // optional int32 line = 2;


    pub fn get_line(&self) -> i32 {
        self.line.unwrap_or(0)
    }
    pub fn clear_line(&mut self) {
        self.line = ::std::option::Option::None;
    }

    pub fn has_line(&self) -> bool {
        self.line.is_some()
    }

    // Param is passed by value, moved
    pub fn set_line(&mut self, v: i32) {
        self.line = ::std::option::Option::Some(v);
    }

    // optional int32 col = 3;


    pub fn get_col(&self) -> i32 {
        self.col.unwrap_or(0)
    }
    pub fn clear_col(&mut self) {
        self.col = ::std::option::Option::None;
    }

    pub fn has_col(&self) -> bool {
        self.col.is_some()
    }

    // Param is passed by value, moved
    pub fn set_col(&mut self, v: i32) {
        self.col = ::std::option::Option::Some(v);
    }

    // optional string func = 4;


    pub fn get_func(&self) -> &str {
        match self.func.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_func(&mut self) {
        self.func.clear();
    }

    pub fn has_func(&self) -> bool {
        self.func.is_some()
    }

    // Param is passed by value, moved
    pub fn set_func(&mut self, v: ::std::string::String) {
        self.func = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_func(&mut self) -> &mut ::std::string::String {
        if self.func.is_none() {
            self.func.set_default();
        }
        self.func.as_mut().unwrap()
    }

    // Take field
    pub fn take_func(&mut self) -> ::std::string::String {
        self.func.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string code = 5;


    pub fn get_code(&self) -> &str {
        match self.code.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        if self.code.is_none() {
            self.code.set_default();
        }
        self.code.as_mut().unwrap()
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        self.code.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for GraphDebugInfo_FileLineCol {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.file_index = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.line = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.col = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.func)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.file_index {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.line {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.col {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.func.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.code.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.file_index {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.line {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.col {
            os.write_int32(3, v)?;
        }
        if let Some(ref v) = self.func.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.code.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphDebugInfo_FileLineCol {
        GraphDebugInfo_FileLineCol::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "file_index",
                |m: &GraphDebugInfo_FileLineCol| { &m.file_index },
                |m: &mut GraphDebugInfo_FileLineCol| { &mut m.file_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "line",
                |m: &GraphDebugInfo_FileLineCol| { &m.line },
                |m: &mut GraphDebugInfo_FileLineCol| { &mut m.line },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "col",
                |m: &GraphDebugInfo_FileLineCol| { &m.col },
                |m: &mut GraphDebugInfo_FileLineCol| { &mut m.col },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "func",
                |m: &GraphDebugInfo_FileLineCol| { &m.func },
                |m: &mut GraphDebugInfo_FileLineCol| { &mut m.func },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code",
                |m: &GraphDebugInfo_FileLineCol| { &m.code },
                |m: &mut GraphDebugInfo_FileLineCol| { &mut m.code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphDebugInfo_FileLineCol>(
                "GraphDebugInfo.FileLineCol",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphDebugInfo_FileLineCol {
        static instance: ::protobuf::rt::LazyV2<GraphDebugInfo_FileLineCol> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphDebugInfo_FileLineCol::new)
    }
}

impl ::protobuf::Clear for GraphDebugInfo_FileLineCol {
    fn clear(&mut self) {
        self.file_index = ::std::option::Option::None;
        self.line = ::std::option::Option::None;
        self.col = ::std::option::Option::None;
        self.func.clear();
        self.code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphDebugInfo_FileLineCol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphDebugInfo_FileLineCol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphDebugInfo_StackTrace {
    // message fields
    pub file_line_cols: ::protobuf::RepeatedField<GraphDebugInfo_FileLineCol>,
    pub frame_id: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphDebugInfo_StackTrace {
    fn default() -> &'a GraphDebugInfo_StackTrace {
        <GraphDebugInfo_StackTrace as ::protobuf::Message>::default_instance()
    }
}

impl GraphDebugInfo_StackTrace {
    pub fn new() -> GraphDebugInfo_StackTrace {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;


    pub fn get_file_line_cols(&self) -> &[GraphDebugInfo_FileLineCol] {
        &self.file_line_cols
    }
    pub fn clear_file_line_cols(&mut self) {
        self.file_line_cols.clear();
    }

    // Param is passed by value, moved
    pub fn set_file_line_cols(&mut self, v: ::protobuf::RepeatedField<GraphDebugInfo_FileLineCol>) {
        self.file_line_cols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_file_line_cols(&mut self) -> &mut ::protobuf::RepeatedField<GraphDebugInfo_FileLineCol> {
        &mut self.file_line_cols
    }

    // Take field
    pub fn take_file_line_cols(&mut self) -> ::protobuf::RepeatedField<GraphDebugInfo_FileLineCol> {
        ::std::mem::replace(&mut self.file_line_cols, ::protobuf::RepeatedField::new())
    }

    // repeated fixed64 frame_id = 2;


    pub fn get_frame_id(&self) -> &[u64] {
        &self.frame_id
    }
    pub fn clear_frame_id(&mut self) {
        self.frame_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_frame_id(&mut self, v: ::std::vec::Vec<u64>) {
        self.frame_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_frame_id(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.frame_id
    }

    // Take field
    pub fn take_frame_id(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.frame_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GraphDebugInfo_StackTrace {
    fn is_initialized(&self) -> bool {
        for v in &self.file_line_cols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.file_line_cols)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_fixed64_into(wire_type, is, &mut self.frame_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.file_line_cols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.frame_id.is_empty() {
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size((self.frame_id.len() * 8) as u32) + (self.frame_id.len() * 8) as u32;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.file_line_cols {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.frame_id.is_empty() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32((self.frame_id.len() * 8) as u32)?;
            for v in &self.frame_id {
                os.write_fixed64_no_tag(*v)?;
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphDebugInfo_StackTrace {
        GraphDebugInfo_StackTrace::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphDebugInfo_FileLineCol>>(
                "file_line_cols",
                |m: &GraphDebugInfo_StackTrace| { &m.file_line_cols },
                |m: &mut GraphDebugInfo_StackTrace| { &mut m.file_line_cols },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "frame_id",
                |m: &GraphDebugInfo_StackTrace| { &m.frame_id },
                |m: &mut GraphDebugInfo_StackTrace| { &mut m.frame_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphDebugInfo_StackTrace>(
                "GraphDebugInfo.StackTrace",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphDebugInfo_StackTrace {
        static instance: ::protobuf::rt::LazyV2<GraphDebugInfo_StackTrace> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphDebugInfo_StackTrace::new)
    }
}

impl ::protobuf::Clear for GraphDebugInfo_StackTrace {
    fn clear(&mut self) {
        self.file_line_cols.clear();
        self.frame_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphDebugInfo_StackTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphDebugInfo_StackTrace {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0tensorflow/core/framework/graph_debug_info.proto\x12\ntensorflow\"\
    \xc2\x07\n\x0eGraphDebugInfo\x12\x14\n\x05files\x18\x01\x20\x03(\tR\x05f\
    iles\x12L\n\x0cframes_by_id\x18\x04\x20\x03(\x0b2*.tensorflow.GraphDebug\
    Info.FramesByIdEntryR\nframesById\x12L\n\x0ctraces_by_id\x18\x06\x20\x03\
    (\x0b2*.tensorflow.GraphDebugInfo.TracesByIdEntryR\ntracesById\x12>\n\
    \x06traces\x18\x02\x20\x03(\x0b2&.tensorflow.GraphDebugInfo.TracesEntryR\
    \x06traces\x12V\n\x10name_to_trace_id\x18\x05\x20\x03(\x0b2-.tensorflow.\
    GraphDebugInfo.NameToTraceIdEntryR\rnameToTraceId\x1az\n\x0bFileLineCol\
    \x12\x1d\n\nfile_index\x18\x01\x20\x01(\x05R\tfileIndex\x12\x12\n\x04lin\
    e\x18\x02\x20\x01(\x05R\x04line\x12\x10\n\x03col\x18\x03\x20\x01(\x05R\
    \x03col\x12\x12\n\x04func\x18\x04\x20\x01(\tR\x04func\x12\x12\n\x04code\
    \x18\x05\x20\x01(\tR\x04code\x1ay\n\nStackTrace\x12L\n\x0efile_line_cols\
    \x18\x01\x20\x03(\x0b2&.tensorflow.GraphDebugInfo.FileLineColR\x0cfileLi\
    neCols\x12\x1d\n\x08frame_id\x18\x02\x20\x03(\x06R\x07frameIdB\x02\x10\
    \x01\x1ae\n\x0fFramesByIdEntry\x12\x10\n\x03key\x18\x01\x20\x01(\x06R\
    \x03key\x12<\n\x05value\x18\x02\x20\x01(\x0b2&.tensorflow.GraphDebugInfo\
    .FileLineColR\x05value:\x028\x01\x1ad\n\x0fTracesByIdEntry\x12\x10\n\x03\
    key\x18\x01\x20\x01(\x06R\x03key\x12;\n\x05value\x18\x02\x20\x01(\x0b2%.\
    tensorflow.GraphDebugInfo.StackTraceR\x05value:\x028\x01\x1a`\n\x0bTrace\
    sEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12;\n\x05value\x18\
    \x02\x20\x01(\x0b2%.tensorflow.GraphDebugInfo.StackTraceR\x05value:\x028\
    \x01\x1a@\n\x12NameToTraceIdEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x06R\x05value:\x028\x01B\x8c\
    \x01\n\x18org.tensorflow.frameworkB\x14GraphDebugInfoProtosP\x01ZUgithub\
    .com/tensorflow/tensorflow/tensorflow/go/core/protobuf/for_core_protos_g\
    o_proto\xf8\x01\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
